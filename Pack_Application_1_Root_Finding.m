# Application 1: Root Finding Problems# L'(gamma) derived from information givenfunction f_x = f(x)    f_x = (9.*csc(.95989-x).*cot(.95989-x)) - (7.*csc(x).*cot(x));endfunction# Secant Method Algorithmfunction answer = secant(p_0,p_1,TOL,n_0)    for i = 2:n_0    # initalize q_i    q_0 = f(p_0);    q_1 = f(p_1);        # next approximation    p_2 = p_1 - (q_1 * (p_1 - p_0) / (q_1 - q_0));        # check if approximation is within tolerance    if abs(p_2 - p_1) <= TOL      answer = p_2;      display(i)      break    endif        # Message failure    if i == n_0      display("Method Failed")    endif            # Calculating the error    if i > 1      if i > 2        old_error = error;      endif      error = abs(p_1 - p_0);      if i > 2        error_ratio = error/(old_error^1.618);        #display(error_ratio)      endif    endif        # reset p_i    p_0 = p_1;    p_1 = p_2;      endfor    endfunction# Graphing L'(gamma) to guess p_0, p_1## Using length of hallways and their sum to set the domaina = 0;b = ((180-125)/180 * pi);x = a:.01:b;plot(x,f(x));hold onplot(x,0);hold off# Calling the Secant Method Algorithm with p_0 = 0.4, p_1 = 0.41root = secant(0.4,0.41,10^(-5),25)# L(gamma) derived from information givenfunction f_x = f(x)  f_x = (9 .* csc(.95989-x)) + (7 .* csc(x));endfunction# Finding value for L(root)max_chalkboard = f(root)# Graphing L(gamma) to make sure a = 0;b = ((180-125)/180 * pi);x = a:.1:b;plot(x,f(x));hold onplot(x,max);hold off